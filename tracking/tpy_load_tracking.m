function outs = tpy_load_tracking(filename, dataLines)
%IMPORTFILE Import data from a text file
%  outs = tpy_load_tracking(filename) reads data from text file FILENAME for the
%  default selection.  Returns the data as a table.
%
%  outs = tpy_load_tracking(filename, dataLines) reads data for the specified row
%  interval(s) of text file FILENAME. Specify DATALINES as a positive
%  scalar integer or a N-by-2 array of positive scalar integers for
%  dis-contiguous row intervals. (Ex. dataLines = [2, Inf]);
%
%
% Auto-generated by MATLAB on 29-Apr-2022 08:01:59
% Edited by jcribb
%

% % Input handling

% If dataLines is not specified, define defaults
if nargin < 2
    dataLines = [2, Inf];
end

% % Set up the Import Options and import the data
opts = delimitedTextImportOptions("NumVariables", 10);

% Specify range and delimiter
opts.DataLines = dataLines;
opts.Delimiter = ",";

% Specify column names and types
opts.VariableNames = ["y", "x", "mass", "size", "ecc", "signal", "raw_mass", "ep", "frame", "particle"];
opts.VariableTypes = ["double", "double", "double", "double", "double", "double", "double", "double", "double", "double"];

% Specify file level properties
opts.ExtraColumnsRule = "ignore";
opts.EmptyLineRule = "read";

% Import the data
T = readtable(filename, opts);

T = renamevars(T,["y", "x", "mass", "size", "ecc", "signal", "raw_mass", "ep", "frame", "particle"], ...
                 ["Yo","Xo","Mass", "Size", "Eccentricity", "Signal", "RawMass", "Ep", "Frame", "ID"]);

T.Fid = repmat(randi(2^50,1,1), height(T), 1);
T.X = T.Xo; 
T.Y = T.Yo; 
T.Zo = zeros(height(T),1); T.Z = T.Zo;

% (3) Set some Table properties
T.Properties.Description = 'Table of trajectories for TrackPy data';

% (3) Set Variable Descriptions and Units for each table column (i.e. Variable)
T.Properties.VariableDescriptions{'Fid'} = 'FileID (key)';
T.Properties.VariableUnits{'Fid'} = '';

T.Properties.VariableDescriptions{'Frame'} = 'Frame Number';
T.Properties.VariableUnits{'Frame'} = '';

T.Properties.VariableDescriptions{'ID'} = 'Trajectory ID';
T.Properties.VariableUnits{'ID'} = '';

T.Properties.VariableDescriptions{'X'} = 'x-location';
T.Properties.VariableUnits{'X'} = 'pixels';

T.Properties.VariableDescriptions{'Y'} = 'y-location';
T.Properties.VariableUnits{'Y'} = 'pixels';

T.Properties.VariableDescriptions{'Z'} = 'z-location';
T.Properties.VariableUnits{'Z'} = 'step size';

T.Properties.VariableDescriptions{'Xo'} = 'x-location, orig.';
T.Properties.VariableUnits{'Xo'} = 'pixels';

T.Properties.VariableDescriptions{'Yo'} = 'y-location, orig.';
T.Properties.VariableUnits{'Yo'} = 'pixels';

T.Properties.VariableDescriptions{'Zo'} = 'z-location, orig.';
T.Properties.VariableUnits{'Zo'} = 'step size';

T.Properties.VariableDescriptions{'Size'} = 'Tracker Size';
T.Properties.VariableUnits{'Size'} = 'pixels';

T.Properties.VariableDescriptions{'Eccentricity'} = 'Intensity at Tracker center.';
T.Properties.VariableUnits{'Eccentricity'} = '[]';

T.Properties.VariableDescriptions{'Signal'} = 'Tracking Signal?';
T.Properties.VariableUnits{'Signal'} = '[]';

T.Properties.VariableDescriptions{'RawMass'} = 'RawMass.';
T.Properties.VariableUnits{'RawMass'} = '[]';

T.Properties.VariableDescriptions{'Ep'} = '????';
T.Properties.VariableUnits{'Ep'} = '[]';

outs = movevars(T, {'Frame', 'ID', ...
                    'X', 'Y', 'Z', ...
                    'Xo', 'Yo', 'Zo', ...
                    'Size', 'Eccentricity', 'Signal', ...
                    'Mass', 'RawMass', 'Ep'}, ... 
                    'after', 'Fid');

% % (3) This hacks the Xo and Yo columns to be next to the X and Y columns. 
% T = movevars(T, {'Frame', 'ID', ...
%                                          'X', 'Y', 'Z', 'Xo', 'Yo', 'Zo', ...
%                                          'Sensitivity', 'CenterIntensity', ...
%                                          'ForegroundSize', 'RegionSize', ...
%                                          'Radius'}, ...
%                                          'After', 'Fid');


end